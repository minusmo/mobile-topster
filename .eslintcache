[{"/Users/eumhojun/mobile-topster/src/App.js":"1","/Users/eumhojun/mobile-topster/src/models/Titles.js":"2","/Users/eumhojun/mobile-topster/src/models/Topster.js":"3","/Users/eumhojun/mobile-topster/src/index.tsx":"4","/Users/eumhojun/mobile-topster/src/components/subComponents/Options.js":"5","/Users/eumhojun/mobile-topster/src/components/subComponents/SearchWindow.js":"6","/Users/eumhojun/mobile-topster/src/components/mainComponents/TopsterTemplate.js":"7","/Users/eumhojun/mobile-topster/src/components/mainComponents/ControlButtons.js":"8","/Users/eumhojun/mobile-topster/src/components/mainComponents/Manual.js":"9","/Users/eumhojun/mobile-topster/src/components/mainComponents/TitleList.js":"10","/Users/eumhojun/mobile-topster/src/components/subComponents/SearchForm.js":"11","/Users/eumhojun/mobile-topster/src/constants/credentials.js":"12"},{"size":9099,"mtime":1649259368089,"results":"13","hashOfConfig":"14"},{"size":246,"mtime":1643179293419,"results":"15","hashOfConfig":"14"},{"size":1051,"mtime":1649258552582,"results":"16","hashOfConfig":"14"},{"size":204,"mtime":1649257502164,"results":"17","hashOfConfig":"14"},{"size":2197,"mtime":1649258419708,"results":"18","hashOfConfig":"14"},{"size":3764,"mtime":1649259466796,"results":"19","hashOfConfig":"14"},{"size":1419,"mtime":1633758470149,"results":"20","hashOfConfig":"14"},{"size":308,"mtime":1633758470146,"results":"21","hashOfConfig":"14"},{"size":488,"mtime":1643179293415,"results":"22","hashOfConfig":"14"},{"size":725,"mtime":1633758470149,"results":"23","hashOfConfig":"14"},{"size":7879,"mtime":1633758470148,"results":"24","hashOfConfig":"14"},{"size":157,"mtime":1634230073721,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"8diocy",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/eumhojun/mobile-topster/src/App.js",["58","59","60","61","62","63"],"import React, { useState, useRef, useEffect } from \"react\";\nimport * as _ from \"lodash\";\nimport { saveAs } from \"file-saver\";\nimport * as htmlToImage from \"html-to-image\";\nimport { Helmet } from \"react-helmet\";\nimport ReactGA from \"react-ga\";\n// import { GAID } from \"./constants/credentials\";\nimport SearchWindow from \"./components/subComponents/SearchWindow\";\nimport TitleList from \"./components/mainComponents/TitleList\";\nimport ControlButtons from \"./components/mainComponents/ControlButtons\";\nimport TopsterTemplate from \"./components/mainComponents/TopsterTemplate\";\nimport Manual from \"./components/mainComponents/Manual\";\nimport Options from \"./components/subComponents/Options\";\nimport { Topster, Tile } from \"./models/Topster\";\nimport \"./styles/App.css\";\nimport paper from \"./assets/images/paper.jpeg\";\n\nfunction MobileTopsterMaker() {\n  const topsterRef = useRef(null);\n  const [rows, setRows] = useState(10);\n  const [columns, setColumns] = useState(10);\n  const [topster, setTopster] = useState(() =>\n    Topster.createGrid(10, 10, \"grid\")\n  );\n  const [type, setType] = useState(\"grid\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [backgroundColor, setBackgroundColor] = useState(\"#000\");\n  const [showSearch, setShowSearch] = useState(false);\n  const [showAlbumTitle, setShowAlbumTitle] = useState(false);\n  const [showOptions, setShowOptions] = useState(\"none\");\n\n  const updateTopster = (row, col, type) => {\n    setType(type);\n    setRows(row);\n    setColumns(col);\n    updateTopsterRef(row, col, type);\n  };\n\n  const updateTopsterRef = (row, col, type) => {\n    if (topsterRef.current) {\n      topsterRef.current._row = row;\n      topsterRef.current._col = col;\n      topsterRef.current._type = type;\n      topsterRef.current._tiles = row * col;\n    }\n  };\n\n  const saveTopster = () => {\n    localStorage.setItem(\"topsterRef\", JSON.stringify(topsterRef.current));\n    localStorage.setItem(\"topster\", JSON.stringify(topster));\n    localStorage.setItem(\"rows\", rows.toString());\n    localStorage.setItem(\"columns\", columns.toString());\n    localStorage.setItem(\"type\", type);\n    localStorage.setItem(\"showSearch\", String(showSearch));\n    localStorage.setItem(\"showAlbumTitle\", String(showAlbumTitle));\n    localStorage.setItem(\"showOptions\", String(showOptions));\n    localStorage.setItem(\"backgroundColor\", backgroundColor);\n    localStorage.setItem(\"selectedCell\", selectedCell);\n  };\n\n  useEffect(() => {\n    // ReactGA.initialize(GAID);\n    // ReactGA.pageview(window.location.pathname);\n\n    const savedTopster = localStorage.getItem(\"topster\");\n    if (savedTopster) {\n      topsterRef.current = JSON.parse(localStorage.getItem(\"topsterRef\"));\n      setTopster(JSON.parse(savedTopster));\n      setRows(Number.parseInt(localStorage.getItem(\"rows\")));\n      setColumns(Number.parseInt(localStorage.getItem(\"columns\")));\n      setType(localStorage.getItem(\"type\"));\n      setShowSearch(\n        localStorage.getItem(\"showSearch\") === \"false\" ? false : true\n      );\n      setShowAlbumTitle(\n        localStorage.getItem(\"showAlbumTitle\") === \"false\" ? false : true\n      );\n      setShowOptions(\n        localStorage.getItem(\"showOptions\") === \"false\" ? false : true\n      );\n      setBackgroundColor(localStorage.getItem(\"backgroundColor\"));\n    } else {\n      topsterRef.current = new Topster(10, 10, \"grid\");\n    }\n  }, []);\n\n  useEffect(() => {\n    saveTopster();\n  }, [\n    topster,\n    rows,\n    columns,\n    backgroundColor,\n    showSearch,\n    showOptions,\n    showAlbumTitle,\n  ]);\n\n  const preSave = (gridconPadding, gridCells, gridCon, titleList) => {\n    gridCon.style.gridTemplateRows = `repeat(${rows}, calc(10*95vw/${rows}))`;\n    gridCon.style.gridTemplateColumns = `repeat(${columns}, calc(10*95vw/${rows}))`;\n    gridCon.style.padding = `calc(10*${gridconPadding})`;\n    gridCon.style.width = \"950vw\";\n\n    Array.from(gridCells).forEach((cell) => (cell.style.padding = \"10vw\"));\n\n    const { padding: titlelistPadding, fontSize } = titleList.style;\n    const titlelistWidth = titleList.offsetWidth;\n    titleList.style.width = `950vw`;\n    titleList.style.padding = `calc(10*${gridconPadding})`;\n    titleList.style.fontSize = \"8em\";\n  };\n\n  const postSave = (\n    gridconPadding,\n    gridTemplateRows,\n    gridTemplateColumns,\n    gridconWidth,\n    gridCells,\n    gridCon,\n    titleList\n  ) => {\n    gridCon.style.width = \"95vw\";\n\n    gridCon.style.padding = gridconPadding;\n    gridCon.style.gridTemplateRows = gridTemplateRows;\n    gridCon.style.gridTemplateColumns = gridTemplateColumns;\n    gridCon.style.width = gridconWidth;\n\n    titleList.style.width = `95vw`;\n    titleList.style.fontSize = \".8em\";\n    titleList.style.padding = \"2.5vw\";\n\n    Array.from(gridCells).forEach((cell) => (cell.style.padding = \"1vw\"));\n  };\n\n  const handleSave = () => {\n    const userAgent = window.navigator.userAgent;\n    const mainCon = document.getElementById(\"mainContainer\");\n    const gridCon = document.getElementById(\"gridContainer\");\n    const titleList = document.getElementById(\"titleList\");\n    const gridCellClassName = type === \"top42\" ? \"gridCell42\" : \"gridCell\";\n    const gridCells = document.getElementsByClassName(gridCellClassName);\n\n    const {\n      gridTemplateRows,\n      gridTemplateColumns,\n      padding: gridconPadding,\n      width: gridconWidth,\n    } = gridCon.style;\n\n    const options = {\n      pixelRatio: 1,\n    };\n\n    if (userAgent.indexOf(\"Chrome\") !== -1) {\n      // if browser is chrome\n      preSave(gridconPadding, gridCells, gridCon, titleList);\n\n      htmlToImage\n        .toBlob(mainCon, options)\n        .then((blob) => {\n          saveAs(blob, \"topster-mobile.png\");\n          postSave(\n            gridconPadding,\n            gridTemplateRows,\n            gridTemplateColumns,\n            gridconWidth,\n            gridCells,\n            gridCon,\n            titleList\n          );\n        })\n        .catch((err) => console.warn(err));\n    } else if (userAgent.indexOf(\"Safari\") !== -1) {\n      // if browser is safari\n      mainCon.style.width = \"950vw\";\n      preSave(gridconPadding, gridCells, gridCon, titleList);\n      htmlToImage\n        .toBlob(mainCon, options)\n        .then((blob) => {\n          saveAs(blob, \"topster-mobile.png\");\n          postSave(\n            gridconPadding,\n            gridTemplateRows,\n            gridTemplateColumns,\n            gridconWidth,\n            gridCells,\n            gridCon,\n            titleList\n          );\n          mainCon.style.width = \"95vw\";\n        })\n        .catch((err) => console.warn(err));\n    }\n  };\n\n  const handleShowOptions = () => {\n    if (showOptions === \"\") {\n      setShowOptions(\"none\");\n    } else {\n      setShowOptions(\"\");\n    }\n  };\n\n  const handleDoubleClick = (e) => {\n    const img = e.target;\n    img.src = paper;\n    img.alt = \"\";\n  };\n\n  const handleClickGridcell = (e) => {\n    e.preventDefault();\n    if (showSearch === false) {\n      setShowSearch(true);\n      setSelectedCell(e.target.id);\n    }\n  };\n\n  const handleClickAlbum = (e) => {\n    let selectedRow = Number.parseInt(selectedCell.split(\"-\")[0]);\n    let selectedCol = Number.parseInt(selectedCell.split(\"-\")[1]);\n\n    let updatedTopster = _.cloneDeep(topster);\n\n    let updatedRow = [...updatedTopster[selectedRow]];\n    updatedRow[selectedCol] = new Tile(e.target.src, e.target.alt);\n    updatedTopster[selectedRow] = updatedRow;\n\n    setTopster(updatedTopster);\n\n    setSelectedCell(null);\n    setShowSearch(false);\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"description\" content=\"mobile topster\" />\n        <title>Mobile Topster</title>\n      </Helmet>\n      <ControlButtons\n        handleShowOptions={handleShowOptions}\n        handleSave={handleSave}\n      />\n\n      <div id=\"mainContainer\">\n        {/* 탑스터  */}\n        <TopsterTemplate\n          rows={rows}\n          cols={columns}\n          topsterType={type}\n          topster={topster}\n          backgroundColor={backgroundColor}\n          handleClickGridcell={handleClickGridcell}\n        />\n        {/* 앨범 타이틀 목록 */}\n        <TitleList\n          rows={rows}\n          cols={columns}\n          showAlbumTitle={showAlbumTitle}\n          topsterRows={topster}\n          backgroundColor={backgroundColor}\n        />\n      </div>\n\n      {/* 옵션 설정 */}\n      <Options\n        showOptions={showOptions}\n        showAlbumTitle={showAlbumTitle}\n        setShowAlbumTitle={setShowAlbumTitle}\n        backgroundColor={backgroundColor}\n        setBackgroundColor={setBackgroundColor}\n        rows={rows}\n        setRows={setRows}\n        columns={columns}\n        setColumns={setColumns}\n        saveTopster={saveTopster}\n        setTopster={setTopster}\n        updateTopster={updateTopster}\n      />\n\n      {/* 검색창  */}\n      <SearchWindow\n        onClickCancel={() => setShowSearch(false)}\n        showSearch={showSearch}\n        handleClickAlbum={handleClickAlbum}\n      />\n\n      {/* 사용설명 */}\n      <Manual />\n    </div>\n  );\n}\n\nexport default MobileTopsterMaker;\n","/Users/eumhojun/mobile-topster/src/models/Titles.js",["64"],"import * as _ from \"lodash\";\n\nexport default class Titles {\n  constructor(row, col) {\n    this._row = row;\n    this._col = col;\n    this.titleList = new Array(this._row).fill(new Array(this._col).fill(\"\"));\n    console.log(this.titleList);\n  }\n}\n",["65","66"],"/Users/eumhojun/mobile-topster/src/models/Topster.js",["67"],"import * as _ from \"lodash\";\nimport paper from \"../assets/images/paper.jpeg\";\n\nfunction createTile(src = paper, alt = \"\") {\n  let newTile = {\n    src: src,\n    alt: alt,\n  };\n  return newTile;\n}\n\nexport class Tile {\n  constructor(src = paper, alt = \"\") {\n    this.src = src;\n    this.alt = alt;\n  }\n}\n\nexport class Topster {\n  constructor(row = 10, col = 10, type = \"grid\") {\n    this._type = type;\n    this._row = row;\n    this._col = col;\n    this._tiles = row * col;\n  }\n\n  static create42(row = 6, col = 7, type = \"top42\") {\n    let row5 = _.fill(Array(5), new Tile());\n    let row6 = _.fill(Array(6), new Tile());\n    let row10 = _.fill(Array(10), new Tile());\n    let rows = [];\n    rows.push(row5);\n    rows.push(row5);\n    rows.push(row6);\n    rows.push(row6);\n    rows.push(row10);\n    rows.push(row10);\n    return _.cloneDeep(rows);\n  }\n\n  static createGrid(row = 10, col = 10, type = \"grid\") {\n    const eachRow = _.fill(Array(col), { src: paper, alt: \"\" });\n    let rows = _.fill(Array(row), eachRow);\n\n    return _.cloneDeep(rows);\n  }\n}\n",["68","69"],"/Users/eumhojun/mobile-topster/src/index.tsx",[],["70","71"],"/Users/eumhojun/mobile-topster/src/components/subComponents/Options.js",["72"],"import { Topster } from \"../../models/Topster\";\n\nfunction Options({\n  showOptions,\n  showAlbumTitle,\n  setShowAlbumTitle,\n  backgroundColor,\n  setBackgroundColor,\n  rows,\n  setRows,\n  columns,\n  setColumns,\n  setTopster,\n  fetchTopster,\n  updateTopster,\n}) {\n  return (\n    <div id=\"options\" style={{ display: showOptions }}>\n      {/* 타이틀 숨김버튼 */}\n      <input\n        type=\"checkbox\"\n        checked={showAlbumTitle}\n        onChange={(e) => setShowAlbumTitle(!showAlbumTitle)}\n      />\n\n      <label>SHOW ALBUM TITLES</label>\n      <br></br>\n\n      {/* 배경색 설정버튼 */}\n      <label>BackgroundColor in #HEX: </label>\n      <input\n        type=\"text\"\n        placeholder=\"#HEX color\"\n        value={backgroundColor}\n        onChange={(e) => setBackgroundColor(e.target.value)}\n      />\n\n      {/* <label>#HEX</label> */}\n      <br></br>\n\n      {/* row 설정 */}\n      <label>ROWS</label>\n      <input\n        type=\"range\"\n        min=\"1\"\n        max=\"10\"\n        value={rows}\n        onChange={(e) => {\n          setRows(Number.parseInt(e.target.value));\n          e.preventDefault();\n        }}\n      />\n      <span>{rows}</span>\n      <br></br>\n\n      {/* columns 설정 */}\n      <label>COLUMNS</label>\n      <input\n        type=\"range\"\n        min=\"1\"\n        max=\"10\"\n        value={columns}\n        onChange={(e) => {\n          setColumns(Number.parseInt(e.target.value));\n          e.preventDefault();\n        }}\n      />\n      <span>{columns}</span>\n      <br></br>\n\n      {/* 그리드설정버튼 */}\n      <button\n        onClick={(e) => {\n          updateTopster(rows, columns, \"grid\");\n          e.preventDefault();\n        }}\n      >\n        SetGrid\n      </button>\n\n      {/* top42 설정버튼 */}\n      <button\n        onClick={(e) => {\n          setRows(6);\n          setColumns(7);\n          updateTopster(6, 7, \"top42\");\n          e.preventDefault();\n        }}\n      >\n        Top42\n      </button>\n\n      {/* 리셋버튼 */}\n      {/* <button\n        onClick={(e) => {\n          resetTopster();\n          fetchTopster();\n          e.preventDefault();\n        }}\n      >\n        Reset\n      </button> */}\n    </div>\n  );\n}\n\nexport default Options;\n","/Users/eumhojun/mobile-topster/src/components/subComponents/SearchWindow.js",["73"],"import React, { useState } from \"react\";\nimport Qs from \"querystring\";\nimport axios from \"axios\";\nimport { username, password } from \"../../constants/credentials\";\nimport SearchForm from \"./SearchForm\";\nimport cancel from \"../../assets/images/cancel.png\";\nimport paper from \"../../assets/images/paper.jpeg\";\n\nconst SPOTIFY_API = \"https://accounts.spotify.com/api/token\";\nconst CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n\nconst getApi1 = (query, country) =>\n  `https://api.spotify.com/v1/search/?q=album:${query}%20OR%20artist:${query}&type=album&market=${country}&limit=50`;\nconst getApi2 = (query, country) =>\n  `https://api.spotify.com/v1/search/?q=${query}&type=album&market=${country}&limit=50`;\n\nfunction SearchWindow({ onClickCancel, showSearch, handleClickAlbum }) {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [country, setCountry] = useState(\"us\");\n  const [searchResult, setSearchResult] = useState([]);\n\n  const handleSubmit = (e, searchInput, country) => {\n    e.preventDefault();\n\n    const trimmedSearchInput = searchInput.trim();\n    // 직접 앨범을 추가하는 경우\n    if (trimmedSearchInput.slice(0, 4) === \"http\") {\n      const artists = window.prompt(\"아티스트명을 입력해주세요.\");\n      const albumName = window.prompt(\"앨범명을 입력해주세요.\");\n\n      setSearchResult([\n        {\n          artists: [{ name: \"\" }],\n          name: \"\",\n          images: [{ url: paper }],\n          id: \"00000\",\n        },\n        {\n          artists: [{ name: artists }],\n          name: albumName,\n          images: [{ url: trimmedSearchInput }],\n          id: \"99999\",\n        },\n      ]);\n      return;\n    }\n\n    const query = trimmedSearchInput.replace(\" \", \"+\");\n\n    // query spotify api\n    const authConfig = {\n      method: \"post\",\n      url: SPOTIFY_API,\n      headers: {\n        \"Content-Type\": CONTENT_TYPE,\n      },\n      data: Qs.stringify({ grant_type: \"client_credentials\" }),\n      auth: {\n        username: username,\n        password: password,\n      },\n      withCredentials: true,\n    };\n\n    axios(authConfig)\n      .then((res) => {\n        const api1 = getApi1(query, country);\n        const api2 = getApi2(query, country);\n\n        const { access_token } = res.data;\n\n        const queryConfig = {\n          method: \"get\",\n          url: api2,\n          headers: {\n            Authorization: `Bearer ${access_token}`,\n          },\n        };\n\n        axios(queryConfig).then((res) => {\n          const {\n            albums: { items },\n          } = res.data;\n\n          setSearchResult([\n            {\n              artists: [{ name: \"\" }],\n              name: \"\",\n              images: [{ url: paper }],\n              id: \"00000\",\n            },\n            ...items,\n          ]);\n        });\n      })\n      .catch((err) => console.warn(err));\n  };\n\n  return (\n    <div\n      id={showSearch ? \"searchBoxContainer-show\" : \"searchBoxContainer-hidden\"}\n    >\n      <img\n        id=\"cancelButton\"\n        src={cancel}\n        alt=\"cancel\"\n        onClick={onClickCancel}\n      />\n      <div id=\"formContainer\">\n        <SearchForm\n          onSubmit={(e) => handleSubmit(e, searchInput, country)}\n          onChangeInput={(e) => setSearchInput(e.target.value)}\n          onChangeCountry={(e) => setCountry(e.target.value)}\n        />\n      </div>\n      {searchResult.length !== 0 ? (\n        searchResult.map((collection) => (\n          <img\n            key={collection.id}\n            width={60}\n            height={60}\n            src={collection.images[0].url}\n            alt={collection.name + \" - \" + collection.artists[0].name}\n            onClick={handleClickAlbum}\n          />\n        ))\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n\nexport default SearchWindow;\n","/Users/eumhojun/mobile-topster/src/components/mainComponents/TopsterTemplate.js",[],"/Users/eumhojun/mobile-topster/src/components/mainComponents/ControlButtons.js",[],"/Users/eumhojun/mobile-topster/src/components/mainComponents/Manual.js",[],"/Users/eumhojun/mobile-topster/src/components/mainComponents/TitleList.js",[],"/Users/eumhojun/mobile-topster/src/components/subComponents/SearchForm.js",[],"/Users/eumhojun/mobile-topster/src/constants/credentials.js",[],{"ruleId":"74","severity":1,"message":"75","line":6,"column":8,"nodeType":"76","messageId":"77","endLine":6,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":89,"column":6,"nodeType":"80","endLine":97,"endColumn":4,"suggestions":"81"},{"ruleId":"74","severity":1,"message":"82","line":107,"column":22,"nodeType":"76","messageId":"77","endLine":107,"endColumn":38},{"ruleId":"74","severity":1,"message":"83","line":107,"column":40,"nodeType":"76","messageId":"77","endLine":107,"endColumn":48},{"ruleId":"74","severity":1,"message":"84","line":108,"column":11,"nodeType":"76","messageId":"77","endLine":108,"endColumn":25},{"ruleId":"74","severity":1,"message":"85","line":206,"column":9,"nodeType":"76","messageId":"77","endLine":206,"endColumn":26},{"ruleId":"74","severity":1,"message":"86","line":1,"column":13,"nodeType":"76","messageId":"77","endLine":1,"endColumn":14},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"74","severity":1,"message":"91","line":4,"column":10,"nodeType":"76","messageId":"77","endLine":4,"endColumn":20},{"ruleId":"87","replacedBy":"92"},{"ruleId":"89","replacedBy":"93"},{"ruleId":"87","replacedBy":"92"},{"ruleId":"89","replacedBy":"93"},{"ruleId":"74","severity":1,"message":"94","line":1,"column":10,"nodeType":"76","messageId":"77","endLine":1,"endColumn":17},{"ruleId":"74","severity":1,"message":"95","line":67,"column":15,"nodeType":"76","messageId":"77","endLine":67,"endColumn":19},"no-unused-vars","'ReactGA' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveTopster'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'titlelistPadding' is assigned a value but never used.","'fontSize' is assigned a value but never used.","'titlelistWidth' is assigned a value but never used.","'handleDoubleClick' is assigned a value but never used.","'_' is defined but never used.","no-native-reassign",["97"],"no-negated-in-lhs",["98"],"'createTile' is defined but never used.",["97"],["98"],"'Topster' is defined but never used.","'api1' is assigned a value but never used.",{"desc":"99","fix":"100"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [topster, rows, columns, backgroundColor, showSearch, showOptions, showAlbumTitle, saveTopster]",{"range":"101","text":"102"},[3418,3533],"[topster, rows, columns, backgroundColor, showSearch, showOptions, showAlbumTitle, saveTopster]"]