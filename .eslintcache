[{"/Users/eumhojun/mobile-topster/src/App.js":"1","/Users/eumhojun/mobile-topster/src/index.js":"2","/Users/eumhojun/mobile-topster/src/credentials.js":"3","/Users/eumhojun/mobile-topster/src/models/Titles.js":"4","/Users/eumhojun/mobile-topster/src/models/Topster.js":"5","/Users/eumhojun/mobile-topster/src/components/Options.js":"6","/Users/eumhojun/mobile-topster/src/components/SearchWindow.js":"7","/Users/eumhojun/mobile-topster/src/components/SearchForm.js":"8","/Users/eumhojun/mobile-topster/src/components/TitleList.js":"9","/Users/eumhojun/mobile-topster/src/components/TopsterTemplate.js":"10","/Users/eumhojun/mobile-topster/src/components/Grid.js":"11","/Users/eumhojun/mobile-topster/src/components/ControlButtons.js":"12","/Users/eumhojun/mobile-topster/src/components/Manual.js":"13"},{"size":10289,"mtime":1633755341580,"results":"14","hashOfConfig":"15"},{"size":168,"mtime":1633282465494,"results":"16","hashOfConfig":"15"},{"size":119,"mtime":1610326559817,"results":"17","hashOfConfig":"15"},{"size":246,"mtime":1633310603009,"results":"18","hashOfConfig":"15"},{"size":2670,"mtime":1633626585251,"results":"19","hashOfConfig":"15"},{"size":2194,"mtime":1633757608509,"results":"20","hashOfConfig":"15"},{"size":3710,"mtime":1633756096833,"results":"21","hashOfConfig":"15"},{"size":7879,"mtime":1633102472288,"results":"22","hashOfConfig":"15"},{"size":612,"mtime":1633629825309,"results":"23","hashOfConfig":"15"},{"size":1419,"mtime":1633625219768,"results":"24","hashOfConfig":"15"},{"size":1038,"mtime":1633309812735,"results":"25","hashOfConfig":"15"},{"size":308,"mtime":1633621056764,"results":"26","hashOfConfig":"15"},{"size":488,"mtime":1633281802749,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"m1kwa4",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eumhojun/mobile-topster/src/App.js",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"import React, { useState, useRef, useEffect } from \"react\";\nimport Qs from \"querystring\";\nimport $ from \"jquery\";\nimport axios from \"axios\";\nimport * as _ from \"lodash\";\nimport { saveAs } from \"file-saver\";\nimport * as htmlToImage from \"html-to-image\";\nimport \"./App.css\";\nimport lp from \"./images/lp.png\";\nimport paper from \"./images/paper.jpeg\";\nimport { username, password } from \"./credentials\";\nimport {\n  SSL_OP_NO_COMPRESSION,\n  SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION,\n} from \"constants\";\nimport TopsterGrid from \"./components/Grid\";\nimport SearchWindow from \"./components/SearchWindow\";\nimport TitleList from \"./components/TitleList\";\nimport ControlButtons from \"./components/ControlButtons\";\nimport TopsterTemplate from \"./components/TopsterTemplate\";\nimport Manual from \"./components/Manual\";\nimport Options from \"./components/Options\";\nimport { Topster, Tile } from \"./models/Topster\";\nimport Titles from \"./models/Titles\";\n\nfunction App() {\n  const topsterRef = useRef(null);\n  const [rows, setRows] = useState(10);\n  const [columns, setColumns] = useState(10);\n  const [topster, setTopster] = useState(() =>\n    Topster.createGrid(10, 10, \"grid\")\n  );\n  const [type, setType] = useState(\"grid\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [backgroundColor, setBackgroundColor] = useState(\"#000\");\n  const [showSearch, setShowSearch] = useState(false);\n  const [showAlbumTitle, setShowAlbumTitle] = useState(false);\n  const [showOptions, setShowOptions] = useState(\"none\");\n\n  const updateTopster = (row, col, type) => {\n    // const oldTopster = _.cloneDeep(topsterRef.current);\n    // const newTopster = _.cloneDeep(\n    //   type === \"grid\"\n    //     ? Topster.createGrid(row, col, type)\n    //     : Topster.create42(6, 7, \"top42\")\n    // );\n    // console.log(\"oldTopster: \\n\", oldTopster, \"newTopster: \\n\", newTopster);\n    // saveTopster();\n    // console.log(newTopster);\n    setType(type);\n    setRows(row);\n    setColumns(col);\n    updateTopsterRef(row, col, type);\n    // fetchTopster(newTopster);\n  };\n\n  const updateTopsterRef = (row, col, type) => {\n    if (topsterRef.current) {\n      topsterRef.current._row = row;\n      topsterRef.current._col = col;\n      topsterRef.current._type = type;\n      topsterRef.current._tiles = row * col;\n    }\n  };\n\n  // const resetTopster = () => {\n  //   setRows(10);\n  //   setColumns(10);\n  //   // 앨범 이미지를 새로운 탑스터로 옮김\n  //   let newTopster = new Topster(10, 10, \"grid\");\n  //   setTopster(newTopster);\n  // };\n\n  const saveTopster = () => {\n    // const imgSrcs = Topster.extractImgSrcs(oldTopster.rows, newTopster);\n    // const imgAlts = Topster.extractImgAlts(oldTopster.rows, newTopster);\n    // localStorage.setItem(\"imgSrcs\", JSON.stringify(imgSrcs));\n    // localStorage.setItem(\"imgAlts\", JSON.stringify(imgAlts));\n    localStorage.setItem(\"topsterRef\", JSON.stringify(topsterRef.current));\n    localStorage.setItem(\"topster\", JSON.stringify(topster));\n    localStorage.setItem(\"rows\", rows.toString());\n    localStorage.setItem(\"columns\", columns.toString());\n    localStorage.setItem(\"type\", type);\n    localStorage.setItem(\"showSearch\", showSearch);\n    localStorage.setItem(\"showAlbumTitle\", showAlbumTitle);\n    localStorage.setItem(\"showOptions\", showOptions);\n    localStorage.setItem(\"backgroundColor\", backgroundColor);\n    localStorage.setItem(\"selectedCell\", selectedCell);\n  };\n\n  const fetchTopster = (newTopster) => {\n    if (localStorage.imgSrcs && localStorage.imgAlts) {\n      const imgSrcs = JSON.parse(localStorage.getItem(\"imgSrcs\"));\n      const imgAlts = JSON.parse(localStorage.getItem(\"imgAlts\"));\n      // let updatedTopster = _.assign({}, topsterRef.current);\n      newTopster.rows.forEach((row, rowIndex) => {\n        row.forEach((tile, colIndex) => {\n          tile.src = imgSrcs[rowIndex][colIndex];\n          tile.alt = imgAlts[rowIndex][colIndex];\n        });\n      });\n      setTopster(newTopster.rows);\n      topsterRef.current = newTopster;\n      // setTitles(topsterRef.current.titleList);\n    }\n  };\n\n  useEffect(() => {\n    const savedTopster = localStorage.getItem(\"topster\");\n    if (savedTopster) {\n      topsterRef.current = JSON.parse(localStorage.getItem(\"topsterRef\"));\n      setTopster(JSON.parse(savedTopster));\n      setRows(Number.parseInt(localStorage.getItem(\"rows\")));\n      setColumns(Number.parseInt(localStorage.getItem(\"columns\")));\n      setType(localStorage.getItem(\"type\"));\n      setShowSearch(Boolean(localStorage.getItem(\"showSearch\")));\n      setShowAlbumTitle(Boolean(localStorage.getItem(\"showAlbumTitle\")));\n      setShowOptions(Boolean(localStorage.getItem(\"showOptions\")));\n      setBackgroundColor(localStorage.getItem(\"backgroundColor\"));\n    } else {\n      topsterRef.current = new Topster(10, 10, \"grid\");\n    }\n  }, []);\n\n  useEffect(() => {\n    saveTopster();\n  }, [topster, rows, columns, backgroundColor]);\n\n  const getExtenedHeight = (gridtemplaterow) => {\n    const heights = gridtemplaterow.split(\" \");\n    const viewportWidth = window.innerWidth;\n    const viewportRatios = _.map(heights, (height) => {\n      return (viewportWidth * Number.parseFloat(height.slice(5, 9))) / 100;\n    });\n    const tentimes = _.map(\n      viewportRatios,\n      (viewportRatio) => 10 * viewportRatio + \"px\"\n    );\n    return tentimes.join(\" \");\n  };\n\n  const handleSave = () => {\n    const mainCon = document.getElementById(\"mainContainer\");\n    const gridCon = document.getElementById(\"gridContainer\");\n    const titleList = document.getElementById(\"titleList\");\n    const gridCellClassName = type === \"top42\" ? \"gridCell42\" : \"gridCell\";\n    const gridCells = document.getElementsByClassName(gridCellClassName);\n\n    // const gridStyle = gridCon.style.gridTemplateRows;\n    // if (curTopsterStyle === \"42\") {\n    //   const extendedStyle = getExtenedHeight(gridStyle);\n    //   gridCon.style.gridTemplateRows = extendedStyle;\n    // }\n    const {\n      gridTemplateRows,\n      gridTemplateColumns,\n      padding: gridconPadding,\n      width: gridconWidth,\n    } = gridCon.style;\n    gridCon.style.gridTemplateRows = `repeat(${rows}, calc(10*95vw/${rows}))`;\n    gridCon.style.gridTemplateColumns = `repeat(${columns}, calc(10*95vw/${rows}))`;\n    gridCon.style.padding = `calc(10*${gridconPadding})`;\n    gridCon.style.width = \"950vw\";\n\n    // const gridConWidth = gridCon.offsetWidth;\n    // gridCon.style.width = gridCon.offsetWidth * 10 + \"px\";\n    // gridCon.style.height =\n    //   curTopsterStyle === \"42\"\n    //     ? gridCon.offsetHeight * 9.5 + \"px\"\n    //     : gridCon.offsetHeight * 10 + \"px\";\n    // gridCon.style.height = gridCon.offsetWidth * 10 + \"px\";\n    // gridCon.style.padding = \"25vw\";\n    Array.from(gridCells).forEach((cell) => (cell.style.padding = \"10vw\"));\n\n    const { padding: titlelistPadding, fontSize } = titleList.style;\n    const titlelistWidth = titleList.offsetWidth;\n    titleList.style.width = `950vw`;\n    titleList.style.padding = `calc(10*${gridconPadding})`;\n    titleList.style.fontSize = \"8em\";\n\n    const options = {\n      pixelRatio: 1,\n    };\n\n    htmlToImage\n      .toBlob(mainCon, options)\n      .then((blob) => {\n        saveAs(blob, \"topster-mobile.png\");\n        gridCon.style.width = \"95vw\";\n        // gridCon.style.height = \"95vw\";\n        gridCon.style.padding = gridconPadding;\n        gridCon.style.gridTemplateRows = gridTemplateRows;\n        gridCon.style.gridTemplateColumns = gridTemplateColumns;\n        gridCon.style.width = gridconWidth;\n\n        titleList.style.width = ``;\n        titleList.style.fontSize = \".8em\";\n        titleList.style.padding = \"2.5vw\";\n\n        Array.from(gridCells).forEach((cell) => (cell.style.padding = \"1vw\"));\n      })\n      .catch((err) => console.warn(err));\n  };\n\n  const handleShowOptions = () => {\n    if (showOptions === \"\") {\n      setShowOptions(\"none\");\n    } else {\n      setShowOptions(\"\");\n    }\n  };\n\n  const handleDoubleClick = (e) => {\n    const img = e.target;\n    img.src = paper;\n    img.alt = \"\";\n  };\n\n  const handleClickGridcell = (e) => {\n    e.preventDefault();\n    if (showSearch === false) {\n      setShowSearch(true);\n      setSelectedCell(e.target.id);\n      // console.log(e.target.id);\n    }\n  };\n\n  const handleClickAlbum = (e) => {\n    let selectedRow = Number.parseInt(selectedCell.split(\"-\")[0]);\n    let selectedCol = Number.parseInt(selectedCell.split(\"-\")[1]);\n\n    let updatedTopster = _.cloneDeep(topster);\n\n    console.log(topster);\n    console.log(updatedTopster);\n    console.log(selectedRow, selectedCol);\n\n    let updatedRow = [...updatedTopster[selectedRow]];\n    updatedRow[selectedCol] = new Tile(e.target.src, e.target.alt);\n    updatedTopster[selectedRow] = updatedRow;\n\n    setTopster(updatedTopster);\n\n    setSelectedCell(null);\n    setShowSearch(false);\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n      <ControlButtons\n        handleShowOptions={handleShowOptions}\n        handleSave={handleSave}\n      />\n\n      <div id=\"mainContainer\">\n        {/* 탑스터  */}\n        <TopsterTemplate\n          rows={rows}\n          cols={columns}\n          topsterType={type}\n          topster={topster}\n          backgroundColor={backgroundColor}\n          handleClickGridcell={handleClickGridcell}\n        />\n        {/* 앨범 타이틀 목록 */}\n        <TitleList\n          rows={rows}\n          cols={columns}\n          showAlbumTitle={showAlbumTitle}\n          topsterRows={topster}\n          backgroundColor={backgroundColor}\n        />\n      </div>\n\n      {/* 옵션 설정 */}\n      <Options\n        showOptions={showOptions}\n        showAlbumTitle={showAlbumTitle}\n        setShowAlbumTitle={setShowAlbumTitle}\n        backgroundColor={backgroundColor}\n        setBackgroundColor={setBackgroundColor}\n        rows={rows}\n        setRows={setRows}\n        columns={columns}\n        setColumns={setColumns}\n        saveTopster={saveTopster}\n        setTopster={setTopster}\n        fetchTopster={fetchTopster}\n        updateTopster={updateTopster}\n      />\n\n      {/* 검색창  */}\n      <SearchWindow\n        onClickCancel={() => setShowSearch(false)}\n        showSearch={showSearch}\n        handleClickAlbum={handleClickAlbum}\n      />\n\n      {/* 사용설명 */}\n      <Manual />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/eumhojun/mobile-topster/src/index.js",[],["75","76"],"/Users/eumhojun/mobile-topster/src/credentials.js",[],"/Users/eumhojun/mobile-topster/src/models/Titles.js",["77"],"import * as _ from \"lodash\";\n\nexport default class Titles {\n  constructor(row, col) {\n    this._row = row;\n    this._col = col;\n    this.titleList = new Array(this._row).fill(new Array(this._col).fill(\"\"));\n    console.log(this.titleList);\n  }\n}\n","/Users/eumhojun/mobile-topster/src/models/Topster.js",["78","79"],"import { each } from \"jquery\";\nimport * as _ from \"lodash\";\nimport lp from \"../images/lp.png\";\nimport paper from \"../images/paper.jpeg\";\n\nexport class Tile {\n  constructor(src = paper, alt = \"\") {\n    this.src = src;\n    this.alt = alt;\n  }\n\n  // static createTile(src = paper, alt = \"\") {\n  //   return {\n  //     src: src,\n  //     alt: alt,\n  //   };\n  // }\n}\n\nexport class Topster {\n  constructor(row = 10, col = 10, type = \"grid\") {\n    this._type = type;\n    this._row = row;\n    this._col = col;\n    this._tiles = row * col;\n  }\n\n  static create42(row = 6, col = 7, type = \"top42\") {\n    // const eachTile = Tile.createTile();\n    let row5 = _.fill(Array(5), new Tile());\n    let row6 = _.fill(Array(6), new Tile());\n    let row10 = _.fill(Array(10), new Tile());\n    let rows = [];\n    rows.push(row5);\n    rows.push(row5);\n    rows.push(row6);\n    rows.push(row6);\n    rows.push(row10);\n    rows.push(row10);\n    return _.cloneDeep(rows);\n  }\n\n  static createGrid(row = 10, col = 10, type = \"grid\") {\n    // const eachTile = new Tile();\n    const eachRow = _.fill(Array(col), { src: paper, alt: \"\" });\n    let rows = _.fill(Array(row), eachRow);\n\n    return _.cloneDeep(rows);\n  }\n\n  // static extractImgSrcs(rows, topsterType) {\n  //   let imgSrcs = [];\n  //   rows.forEach((row) => {\n  //     row.forEach((tile) => imgSrcs.push(tile.src));\n  //   });\n\n  //   let imgGrid = [];\n  //   if (topsterType === \"top42\") {\n  //     imgGrid.push(imgSrcs.slice(0, 5));\n  //     imgGrid.push(imgSrcs.slice(5, 10));\n  //     imgGrid.push(imgSrcs.slice(10, 16));\n  //     imgGrid.push(imgSrcs.slice(16, 22));\n  //     imgGrid.push(imgSrcs.slice(22, 32));\n  //     imgGrid.push(imgSrcs.slice(32, 42));\n  //     return imgGrid;\n  //   } else {\n  //     for (let i = 0; i < topster.tiles; i += topster.col) {\n  //       imgGrid.push(imgSrcs.slice(i, i + topster.col));\n  //     }\n  //     return _.cloneDeep(imgGrid);\n  //   }\n  // }\n\n  // static extractImgAlts(rows, topsterType) {\n  //   let imgAlts = [];\n  //   rows.forEach((row) => {\n  //     row.forEach((tile) => imgAlts.push(tile.alt));\n  //   });\n\n  //   let imgGrid = [];\n  //   if (topsterType === \"top42\") {\n  //     imgGrid.push(imgAlts.slice(0, 5));\n  //     imgGrid.push(imgAlts.slice(5, 10));\n  //     imgGrid.push(imgAlts.slice(10, 16));\n  //     imgGrid.push(imgAlts.slice(16, 22));\n  //     imgGrid.push(imgAlts.slice(22, 32));\n  //     imgGrid.push(imgAlts.slice(32, 42));\n  //     return imgGrid;\n  //   } else {\n  //     for (let i = 0; i < topster.tiles; i += topster.col) {\n  //       imgGrid.push(imgAlts.slice(i, i + topster.col));\n  //     }\n  //     return _.cloneDeep(imgGrid);\n  //   }\n  // }\n}\n","/Users/eumhojun/mobile-topster/src/components/Options.js",["80"],"/Users/eumhojun/mobile-topster/src/components/SearchWindow.js",["81","82"],"/Users/eumhojun/mobile-topster/src/components/SearchForm.js",[],"/Users/eumhojun/mobile-topster/src/components/TitleList.js",[],"/Users/eumhojun/mobile-topster/src/components/TopsterTemplate.js",[],"/Users/eumhojun/mobile-topster/src/components/Grid.js",["83","84","85","86","87","88","89"],"import React, { useState } from \"react\";\nimport * as _ from \"lodash\";\nimport ReactGridLayout from \"react-grid-layout\";\nimport { set } from \"lodash\";\n\nlet xPoints = [];\nfor (let i = 0; i < 10; i++) {\n  xPoints = _.concat(xPoints, _.range(10));\n}\n// console.log(xPoints);\nconst yPoints = _.fill(Array(10), 0);\nconst layout = _.fill(Array(100), {\n  i: _.uniqueId(),\n  x: 0,\n  y: 0,\n  w: 1,\n  h: 1,\n});\n\nfor (let i = 0; i < 100; i++) {\n  _.set(layout[i], \"x\", xPoints[i]);\n  _.set(layout[i], \"y\", _.floor(i / 10));\n}\n\nconst TopsterGrid = () => {\n  const [cols, setCols] = useState(10);\n  const [rows, setRows] = useState(10);\n  const [rowHeight, setRowHeight] = useState(30);\n  const [width, setWidth] = useState(1200);\n\n  return (\n    <ReactGridLayout\n      layout={layout}\n      className=\"layout\"\n      cols={cols}\n      rowHeight={rowHeight}\n      width={width}\n      isResizable=\"false\"\n    >\n      {_.map(layout, (cell) => (\n        <div key={cell.i}>{cell.w}</div>\n      ))}\n    </ReactGridLayout>\n  );\n};\n\nexport default TopsterGrid;\n","/Users/eumhojun/mobile-topster/src/components/ControlButtons.js",[],"/Users/eumhojun/mobile-topster/src/components/Manual.js",[],{"ruleId":"90","severity":1,"message":"91","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":10},{"ruleId":"90","severity":1,"message":"94","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":9},{"ruleId":"90","severity":1,"message":"95","line":4,"column":8,"nodeType":"92","messageId":"93","endLine":4,"endColumn":13},{"ruleId":"90","severity":1,"message":"96","line":9,"column":8,"nodeType":"92","messageId":"93","endLine":9,"endColumn":10},{"ruleId":"90","severity":1,"message":"97","line":11,"column":10,"nodeType":"92","messageId":"93","endLine":11,"endColumn":18},{"ruleId":"90","severity":1,"message":"98","line":11,"column":20,"nodeType":"92","messageId":"93","endLine":11,"endColumn":28},{"ruleId":"90","severity":1,"message":"99","line":13,"column":3,"nodeType":"92","messageId":"93","endLine":13,"endColumn":24},{"ruleId":"90","severity":1,"message":"100","line":14,"column":3,"nodeType":"92","messageId":"93","endLine":14,"endColumn":48},{"ruleId":"90","severity":1,"message":"101","line":16,"column":8,"nodeType":"92","messageId":"93","endLine":16,"endColumn":19},{"ruleId":"90","severity":1,"message":"102","line":24,"column":8,"nodeType":"92","messageId":"93","endLine":24,"endColumn":14},{"ruleId":"103","severity":1,"message":"104","line":128,"column":6,"nodeType":"105","endLine":128,"endColumn":47,"suggestions":"106"},{"ruleId":"90","severity":1,"message":"107","line":130,"column":9,"nodeType":"92","messageId":"93","endLine":130,"endColumn":25},{"ruleId":"90","severity":1,"message":"108","line":176,"column":22,"nodeType":"92","messageId":"93","endLine":176,"endColumn":38},{"ruleId":"90","severity":1,"message":"109","line":176,"column":40,"nodeType":"92","messageId":"93","endLine":176,"endColumn":48},{"ruleId":"90","severity":1,"message":"110","line":177,"column":11,"nodeType":"92","messageId":"93","endLine":177,"endColumn":25},{"ruleId":"90","severity":1,"message":"111","line":214,"column":9,"nodeType":"92","messageId":"93","endLine":214,"endColumn":26},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"90","severity":1,"message":"116","line":1,"column":13,"nodeType":"92","messageId":"93","endLine":1,"endColumn":14},{"ruleId":"90","severity":1,"message":"117","line":1,"column":10,"nodeType":"92","messageId":"93","endLine":1,"endColumn":14},{"ruleId":"90","severity":1,"message":"96","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":10},{"ruleId":"90","severity":1,"message":"118","line":1,"column":10,"nodeType":"92","messageId":"93","endLine":1,"endColumn":17},{"ruleId":"90","severity":1,"message":"96","line":7,"column":8,"nodeType":"92","messageId":"93","endLine":7,"endColumn":10},{"ruleId":"90","severity":1,"message":"119","line":68,"column":15,"nodeType":"92","messageId":"93","endLine":68,"endColumn":19},{"ruleId":"90","severity":1,"message":"120","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":13},{"ruleId":"90","severity":1,"message":"121","line":11,"column":7,"nodeType":"92","messageId":"93","endLine":11,"endColumn":14},{"ruleId":"90","severity":1,"message":"122","line":26,"column":16,"nodeType":"92","messageId":"93","endLine":26,"endColumn":23},{"ruleId":"90","severity":1,"message":"123","line":27,"column":10,"nodeType":"92","messageId":"93","endLine":27,"endColumn":14},{"ruleId":"90","severity":1,"message":"124","line":27,"column":16,"nodeType":"92","messageId":"93","endLine":27,"endColumn":23},{"ruleId":"90","severity":1,"message":"125","line":28,"column":21,"nodeType":"92","messageId":"93","endLine":28,"endColumn":33},{"ruleId":"90","severity":1,"message":"126","line":29,"column":17,"nodeType":"92","messageId":"93","endLine":29,"endColumn":25},"no-unused-vars","'Qs' is defined but never used.","Identifier","unusedVar","'$' is defined but never used.","'axios' is defined but never used.","'lp' is defined but never used.","'username' is defined but never used.","'password' is defined but never used.","'SSL_OP_NO_COMPRESSION' is defined but never used.","'SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION' is defined but never used.","'TopsterGrid' is defined but never used.","'Titles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveTopster'. Either include it or remove the dependency array.","ArrayExpression",["127"],"'getExtenedHeight' is assigned a value but never used.","'titlelistPadding' is assigned a value but never used.","'fontSize' is assigned a value but never used.","'titlelistWidth' is assigned a value but never used.","'handleDoubleClick' is assigned a value but never used.","no-native-reassign",["128"],"no-negated-in-lhs",["129"],"'_' is defined but never used.","'each' is defined but never used.","'Topster' is defined but never used.","'api1' is assigned a value but never used.","'set' is defined but never used.","'yPoints' is assigned a value but never used.","'setCols' is assigned a value but never used.","'rows' is assigned a value but never used.","'setRows' is assigned a value but never used.","'setRowHeight' is assigned a value but never used.","'setWidth' is assigned a value but never used.",{"desc":"130","fix":"131"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [topster, rows, columns, backgroundColor, saveTopster]",{"range":"132","text":"133"},[4843,4884],"[topster, rows, columns, backgroundColor, saveTopster]"]